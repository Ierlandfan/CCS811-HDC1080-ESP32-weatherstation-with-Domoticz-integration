/*

    2018 - Vortecks
    IT IS RECOMMENDED THAT YOU LEAVE THE CO2/TVOC MODULE RUNNING FOR 48 HOURS BEFORE USE
    THIS IS ONLY A REFERENCE DEVICE AND IS NOT A REPLACEMENT FOR A CALIBRATED UNIT. PLEASE DO NOT USE IT FOR SITUATIONS WHERE YOUR HEALTH/SAFETY MAY BE AT RISK

    Safe levels of CO2 & TVOC:
    _______________________________________________________________________________________________________________________________________________________________________
    CO2 (equivalent calculated carbon-dioxide)
    350-1,000ppm                   Concentrations typical of occupied indoor spaces with good air exchange
    1,000-2,000ppm                 Complaints of drowsiness and poor air.
    2,000-5,000 ppm                Headaches, sleepiness and stagnant, stale, stuffy air. Poor concentration, loss of attention, increased heart rate and slight nausea may also be present.

    _______________________________________________________________________________________________________________________________________________________________________
    TVOC (Total Volatile Organic Compound)
    If TVOCs are present, an overall concentration will be reported. While there are no exposure limits for TVOCs some guidelines have been recommended. Generally, TVOC concentrations between 50 parts per billion (ppb) and 325 ppb are thought to be acceptable

    Household product which emit TVOC:
    Paints, paint strippers and other solvents, wood preservatives, aerosol sprays, cleansers and disinfectants, moth repellents and air fresheners, stored fuels and automotive products, hobby supplies, dry-cleaned clothing, pesticide, other products, including:

    Building materials and furnishings which emit TVOC:
    Office equipment such as copiers and printers, correction fluids and carbonless copy paper, graphics and craft materials including glues and adhesives, permanent markers and photographic solutions.
    _______________________________________________________________________________________________________________________________________________________________________
   2019- Modified by Ierlandfan to send Temp/Humid C02 and VOC values to Domoticz so it can be used as a standalone sensor without display. 
   

    ********************************************************************************************************************************************************
                                                                      Change the following to suit
    ********************************************************************************************************************************************************
*/
const char*     ssid     = "YOUR-SSID";              // The SSID of your network
const char*     password = "YOUR-PASSWORD";           // The password of your network
#define         Weather_interval 900000               // How many milliseconds for weather update - 900000 = 15mins (1000x60x15)
const char*     ntpServer = "pool.ntp.org";           // The URL of the time server
const long      gmtOffset_sec = 0;                    // How many seconds offset from GMT
const int       daylightOffset_sec = 3600;            // Adjust for BST/DST - In the UK, BST should be zero, winter should be 3600
const bool      PWS = true;                           // Use PWS (Personal Weather Station) to gather weather data or use 'Country' and 'City'. If PWS = true, the country & city are ignored
const String    PWSLocation = "pws:IOLDBURY2";        // Wunderground station ID - These usually have to start with PWS: (e.g. Tividale pws:IOLDBURY2 Hednesford pws:IHEDNESF2)
const String    apikey   = "YOUR_WUNDERGROUND_KEY" ;  // Your Wunderground API key
const String    country  = "UK";                      // Your country - Not needed if you use a PWS code
const String    city     = "Hednesford";              // Your city - Not needed if you use a PWS code
const float     TempOffset = -6.5;                    // Offset for internal temperature
const float     HumOffset = 10;                       // Offset for internal humidity
const int       CO2Trigger = 2000;                    // Trigger level for CO2 - 350-1,000ppm is considered acceptable
const int       TVOCTrigger = 325;                    // Trigger level for TVOC - Between 50 parts per billion (ppb) and 325 ppb is considered acceptable
const bool      returnAfterAlarm = true;              // When an alarm is triggered (CO2 or TVOC) should if be cancelled when readings return to normal? (false = stay on alarm, true = return to normal)
const bool      degreesC = true;                      // Display degrees C (True) or degrees F (False)
const bool      windMPH = true;                       // Display wind in MPH (True) or KPH (False)
const int       buzzerPin = 27;                       // The buzzer pin number
/* domoticz specific values */
const char * domoticz_server = "192.168.1.100"; //Domoticz IP
int port = 8080; //Domoticz port
int idx1 = 5; //IDX for virtual sensor, found in Setup -> Devices //Co2
int idx2 = 5; //IDX for virtual sensor, found in Setup -> Devices //Temp
int idx3 = 5; //IDX for virtual sensor, found in Setup -> Devices // Humidity
int idx4 = 5; //IDX for virtual sensor, found in Setup -> Devices //Spare
int idx5 = 5; //IDX for virtual sensor, found in Setup -> Devices //Spare
/*
    ********************************************************************************************************************************************************
                                                           Do not change anything below this point
    ********************************************************************************************************************************************************
*/

#include <elapsedMillis.h>    // https://github.com/pfeerick/elapsedMillis
#include <ArduinoJson.h>      // https://github.com/bblanchon/ArduinoJson
#include <U8g2lib.h>          // https://github.com/olikraus/u8g2
#include <WiFi.h>
#include <SPI.h>
#include "time.h"
#include "driver/spi_master.h"
#include "Adafruit_CCS811.h"

#define icon_width  50
#define icon_height 50

const char* host = "api.wunderground.com";
const int icon_x = 102; // X position of weather icon
const int icon_y = 12; // Y position of weather icon
int TVOC = 0;
int CO2 = 0;
bool initboot = true;
Adafruit_CCS811 ccs;
elapsedMillis timer0;
WiFiClient client;
String currCondString;
String icon;
String CurrTemp;
String CurrWindDir;
String CurrPress;
String CurrWeather;
String CurrHumd;
String CurrWind;
String CurrTrend;

U8G2_SSD1322_NHD_256X64_F_4W_HW_SPI u8g2(U8G2_R0, /* cs=*/ 0, /* dc=*/ 32, /* reset=*/ 19);  // Enable U8G2_16BIT in u8g2.h

// Define each of the weather icons
const uint8_t snow_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xB0, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF0, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC3,
  0x87, 0x01, 0x00, 0x00, 0x00, 0x30, 0x83, 0x83, 0x09, 0x00, 0x00, 0x00,
  0xF0, 0x83, 0xC1, 0x1F, 0x00, 0x00, 0x00, 0xF0, 0x87, 0xC3, 0x0F, 0x00,
  0x00, 0x00, 0xC0, 0x87, 0xE3, 0x07, 0x00, 0x00, 0x00, 0xE0, 0xDF, 0xF7,
  0x0F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x20,
  0x70, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0C, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x70, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0x3F, 0x0E,
  0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xE0, 0x8F,
  0xE3, 0x07, 0x00, 0x00, 0x00, 0xC0, 0x87, 0xC3, 0x07, 0x00, 0x00, 0x00,
  0xF0, 0x83, 0xC1, 0x1F, 0xE0, 0x00, 0x00, 0x70, 0x83, 0xC3, 0x1D, 0x60,
  0x01, 0x00, 0x00, 0xC3, 0x87, 0x01, 0xF8, 0x03, 0x00, 0x00, 0xE3, 0x8F,
  0x01, 0xF3, 0x09, 0x00, 0x00, 0xF0, 0x1F, 0xC0, 0xE3, 0x58, 0x00, 0x00,
  0xB0, 0x1F, 0xC0, 0x63, 0x7C, 0x00, 0x00, 0x80, 0x01, 0x80, 0x67, 0x3E,
  0x00, 0x00, 0x80, 0x03, 0xC0, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0xF8, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x00,
  0x00, 0xC0, 0xF9, 0x23, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x7F, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x67, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x63,
  0x7C, 0x00, 0x00, 0x00, 0x00, 0x40, 0xE3, 0x68, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF3, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t rain_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x5F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xA5, 0x1E,
  0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xBE, 0x07, 0x00, 0x00, 0x00, 0x60,
  0x00, 0xF4, 0x3F, 0x00, 0x00, 0x00, 0x70, 0x00, 0xFA, 0x7E, 0x00, 0x00,
  0x00, 0x30, 0x00, 0xA0, 0x75, 0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0xEA,
  0x00, 0x00, 0xC0, 0x3F, 0x00, 0x18, 0xD8, 0x1F, 0x00, 0xE0, 0x3F, 0x00,
  0x20, 0xE0, 0x7F, 0x00, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x7A, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x40, 0xE5, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xB0, 0xE9,
  0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x01, 0x0C, 0x00, 0x00, 0x00,
  0x00, 0xA8, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x01, 0x0C, 0x00,
  0x00, 0x00, 0x00, 0xA8, 0x01, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x01,
  0xB8, 0x69, 0xAA, 0xA9, 0x69, 0xFA, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF,
  0x7F, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x01, 0x08,
  0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x03, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0xC1, 0x03, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE1,
  0x03, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE1, 0x03, 0x00, 0x00, 0x00, 0x00,
  0xF0, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t sleet_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x5F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0xEB, 0x1D, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xBE, 0x0F, 0x00, 0x00,
  0x00, 0x60, 0x00, 0xF4, 0x3F, 0x00, 0x00, 0x00, 0x70, 0x00, 0xFA, 0x7B,
  0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0xE9, 0x00, 0x00, 0x00, 0x3A, 0x00,
  0xA8, 0xF6, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x28, 0xE8, 0x1F, 0x00, 0xF0,
  0x3D, 0x00, 0x10, 0xE0, 0x3F, 0x00, 0x38, 0x00, 0x00, 0x00, 0xF0, 0x79,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x1C, 0x00, 0x00, 0x00,
  0x60, 0xD5, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x01, 0x0C, 0x00,
  0x00, 0x00, 0x00, 0xB8, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01,
  0x0C, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x01, 0x7C, 0x5A, 0x42, 0x65, 0x5A,
  0xE2, 0x01, 0x78, 0xA9, 0x79, 0x9A, 0xA9, 0xFD, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x83, 0x83, 0x03, 0x00, 0x00, 0x00, 0x80,
  0x83, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x20, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x30,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x38, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t sunny_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x41, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x84, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0xE3, 0x00, 0x00,
  0x00, 0x00, 0x10, 0xDE, 0xF7, 0x10, 0x00, 0x00, 0x00, 0x70, 0xFE, 0xFF,
  0x1C, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFE, 0x1E, 0x00, 0x00, 0x00, 0xE0,
  0xEF, 0xDE, 0x0F, 0x00, 0x00, 0x80, 0xE0, 0x67, 0xC6, 0x0F, 0x00, 0x00,
  0x00, 0xEF, 0xA6, 0xC6, 0xEE, 0x03, 0x00, 0x00, 0x7F, 0x25, 0x50, 0xFE,
  0x01, 0x00, 0x00, 0xFE, 0x01, 0x16, 0xFE, 0x00, 0x00, 0x00, 0xCE, 0xA4,
  0x40, 0xE6, 0x00, 0x00, 0x00, 0x9E, 0xC0, 0x84, 0xF2, 0x00, 0x00, 0xE0,
  0x3F, 0x2A, 0x11, 0xF8, 0x1F, 0x00, 0xE0, 0x1F, 0x8A, 0x82, 0xFA, 0x0F,
  0x00, 0xC0, 0x4B, 0x10, 0x28, 0x82, 0x07, 0x00, 0x80, 0x13, 0x09, 0x56,
  0xD1, 0x03, 0x00, 0x00, 0x8F, 0x60, 0x40, 0xE4, 0x01, 0x00, 0xC0, 0x2F,
  0x0D, 0x16, 0xE5, 0x07, 0x00, 0xF0, 0xC7, 0xA0, 0x40, 0x10, 0x1F, 0x00,
  0xF0, 0x03, 0x06, 0x09, 0xA1, 0x1F, 0x00, 0xC0, 0xAF, 0xD0, 0xA0, 0xE4,
  0x07, 0x00, 0x00, 0x0F, 0x06, 0x2D, 0xE5, 0x01, 0x00, 0x80, 0x57, 0xA0,
  0x80, 0xE0, 0x03, 0x00, 0xC0, 0x43, 0x45, 0x81, 0x84, 0x07, 0x00, 0xE0,
  0x3F, 0x10, 0x14, 0xFA, 0x0F, 0x00, 0xE0, 0x5F, 0x84, 0x48, 0xF8, 0x1F,
  0x00, 0x00, 0x1E, 0x15, 0x32, 0x71, 0x00, 0x00, 0x00, 0x4E, 0x02, 0xA5,
  0xEA, 0x00, 0x00, 0x00, 0xFE, 0x68, 0x20, 0xFE, 0x00, 0x00, 0x00, 0xFF,
  0x0A, 0x04, 0xFE, 0x01, 0x00, 0x80, 0x7F, 0x56, 0xE5, 0xDC, 0x03, 0x00,
  0x00, 0xE0, 0x47, 0xEC, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xDE, 0x0F,
  0x00, 0x00, 0x00, 0xE0, 0xFE, 0xDE, 0x1F, 0x00, 0x00, 0x00, 0x70, 0xFE,
  0xFF, 0x1C, 0x00, 0x00, 0x00, 0x10, 0xDE, 0xF7, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x8E, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x43, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t cloudy_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0xA7, 0x0F, 0x00, 0x00, 0x00, 0x00,
  0xC0, 0x67, 0x1D, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xBA, 0x07, 0x00,
  0x00, 0x00, 0x60, 0x00, 0xF6, 0x3F, 0x00, 0x00, 0x00, 0x30, 0x00, 0xF4,
  0x7E, 0x00, 0x00, 0x00, 0x30, 0x00, 0xA8, 0xF9, 0x00, 0x00, 0x00, 0x30,
  0x00, 0x68, 0xEB, 0x00, 0x00, 0xC0, 0x3F, 0x00, 0x50, 0xD0, 0x1F, 0x00,
  0xF0, 0x3F, 0x00, 0x10, 0xD0, 0x7F, 0x00, 0x78, 0x10, 0x00, 0x00, 0xE0,
  0x7D, 0x00, 0x18, 0x00, 0x00, 0x00, 0x40, 0xF6, 0x00, 0x1C, 0x00, 0x00,
  0x00, 0xA0, 0xC8, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x01, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0xA8, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xD0,
  0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x01, 0x1C, 0x12, 0x04, 0x40,
  0x48, 0xF4, 0x01, 0x78, 0xA9, 0xAA, 0xAB, 0xA5, 0xEA, 0x00, 0xF8, 0xFF,
  0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t mostlysunny_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xC0, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x7F,
  0x02, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
  0xF8, 0xFB, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xCA, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x3E, 0x66, 0x0F, 0x00, 0x00, 0x00, 0xF8, 0x6E, 0xC4, 0x0F,
  0x00, 0x00, 0x00, 0xFF, 0x5F, 0x11, 0x7E, 0x00, 0x00, 0x80, 0xEF, 0x0F,
  0x5C, 0x3E, 0x00, 0x00, 0xC0, 0x97, 0xBE, 0x00, 0x1C, 0x00, 0x00, 0xE0,
  0x00, 0xBD, 0x9F, 0x3F, 0x00, 0x00, 0x60, 0x00, 0xFA, 0xBF, 0x78, 0x00,
  0x00, 0x70, 0x00, 0xF6, 0x7F, 0x1E, 0x00, 0x00, 0x30, 0x00, 0xE8, 0x72,
  0x1C, 0x00, 0x00, 0x30, 0x00, 0xA0, 0xF5, 0x3E, 0x00, 0xC0, 0x3F, 0x00,
  0x38, 0xE8, 0x7F, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xD0, 0x3F, 0x00, 0x70,
  0x20, 0x00, 0x00, 0xE0, 0x7D, 0x00, 0x18, 0x00, 0x00, 0x00, 0x60, 0xF9,
  0x00, 0x1C, 0x00, 0x00, 0x00, 0x80, 0xE2, 0x00, 0x0C, 0x00, 0x00, 0x00,
  0x00, 0xD4, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x0C, 0x00,
  0x00, 0x00, 0x00, 0xA0, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x01,
  0x9C, 0x00, 0x44, 0x10, 0x10, 0xC4, 0x01, 0xB8, 0xDB, 0x3A, 0xAA, 0xAA,
  0xFB, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t fog_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xBF, 0x0F, 0x00, 0x00, 0x00,
  0x00, 0xC0, 0xE7, 0x1D, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0x0F,
  0x00, 0x00, 0x00, 0x60, 0x00, 0xFA, 0x3F, 0x00, 0x00, 0x00, 0x70, 0x00,
  0xFC, 0x7F, 0x00, 0x00, 0x00, 0x30, 0x00, 0xF8, 0xF6, 0x00, 0x00, 0x00,
  0x3A, 0x00, 0x68, 0xFB, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x28, 0xC8, 0x1F,
  0x00, 0xF0, 0x3F, 0x00, 0x30, 0xF0, 0x7F, 0x00, 0x78, 0x20, 0x00, 0x00,
  0xD0, 0xFB, 0x00, 0x18, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x00, 0x1C, 0x00,
  0x00, 0x3F, 0x60, 0xCE, 0x01, 0x0C, 0x00, 0x80, 0xFF, 0x00, 0xF8, 0x01,
  0x0C, 0x00, 0xE0, 0xFF, 0x01, 0xD0, 0x01, 0x0C, 0x00, 0xE0, 0xE0, 0x7F,
  0xE8, 0x01, 0x0C, 0x00, 0x70, 0xE0, 0xFF, 0xF8, 0x01, 0x9C, 0xA5, 0x39,
  0x00, 0xFF, 0xDB, 0x01, 0xF8, 0xFB, 0x3F, 0x80, 0xEF, 0xFF, 0x00, 0xF0,
  0xFF, 0x3F, 0x00, 0xA2, 0x7F, 0x00, 0xE0, 0xFF, 0x3F, 0x00, 0x81, 0x7F,
  0x00, 0x00, 0xE0, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x00, 0x60, 0x00, 0x00,
  0x80, 0xF5, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x70, 0x00, 0x00, 0x00, 0xF0, 0x00,
  0x00, 0xE0, 0xA5, 0x56, 0x56, 0xFD, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF,
  0xFF, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x24,
  0xAA, 0xAA, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t tstorms_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xAF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xD3, 0x1E, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0x00, 0xBE, 0x0F, 0x00, 0x00, 0x00, 0x60, 0x00, 0xF6,
  0x3F, 0x00, 0x00, 0x00, 0x70, 0x00, 0xF8, 0x7D, 0x00, 0x00, 0x00, 0x30,
  0x00, 0xE4, 0xF7, 0x00, 0x00, 0x00, 0x32, 0x00, 0x78, 0xEA, 0x00, 0x00,
  0xC0, 0x3F, 0x00, 0x28, 0xF8, 0x1F, 0x00, 0xF0, 0x3F, 0x00, 0x10, 0xC0,
  0x3F, 0x00, 0x78, 0x20, 0x00, 0x00, 0xD0, 0x7E, 0x00, 0x18, 0x00, 0x00,
  0x00, 0xA0, 0xF5, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xA0, 0xEA, 0x01, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0xD8, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xE8,
  0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x01, 0x0C, 0x00, 0x00, 0x00,
  0x00, 0xE8, 0x01, 0x9C, 0x10, 0x00, 0x02, 0x20, 0xD8, 0x01, 0xB8, 0x9E,
  0xBB, 0xE5, 0x5E, 0xFB, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00,
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x70, 0x72, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0,
  0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xFD, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x98, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xEA, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xDC, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x39,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xC4, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0E, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t nt_mostlycloudy_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x7F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7C, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF2, 0x01, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0xD5, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xAB,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0xA7, 0x1F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF7, 0xFB, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3F, 0xE4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xD0,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x0F, 0xC0, 0xEB, 0x01, 0x00, 0x00, 0xC0, 0x0F, 0x40, 0xE5, 0x05, 0x00,
  0x00, 0xF0, 0x0F, 0x80, 0xE0, 0x3F, 0x00, 0x00, 0x38, 0x04, 0x00, 0x80,
  0x7F, 0x00, 0x00, 0x1C, 0x00, 0x00, 0xC0, 0xE6, 0x00, 0x00, 0x0C, 0x00,
  0x00, 0x00, 0xF0, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00,
  0x0C, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xF8,
  0x00, 0x00, 0x9E, 0x24, 0x49, 0x12, 0xE5, 0x00, 0xFC, 0xFF, 0xFF, 0xFF,
  0xFF, 0x7F, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFC, 0xEB,
  0xBD, 0x27, 0x20, 0x04, 0x00, 0xF0, 0x2A, 0xE1, 0x03, 0x00, 0x00, 0x00,
  0xE0, 0x97, 0xFA, 0x01, 0x00, 0x00, 0x00, 0xC0, 0xBF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

const uint8_t nt_clear_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
  0xF8, 0xF4, 0x07, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xAB, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0xAB, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x57, 0x7D,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xAF, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0xEA, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xAE, 0xE6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xF5, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x9C, 0x8A, 0x03, 0x00, 0x00, 0x00, 0x00, 0xBC,
  0x92, 0x03, 0x00, 0x00, 0x00, 0x00, 0x5C, 0xA9, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x9C, 0x9A, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x55, 0x07, 0x00,
  0x00, 0x00, 0x00, 0xBC, 0x4A, 0x07, 0x00, 0x00, 0x00, 0x00, 0x5E, 0xA5,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x2E, 0xAD, 0x07, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x25, 0x07, 0x00, 0x00,
  0x00, 0x80, 0xA7, 0xDA, 0x07, 0x00, 0x00, 0x00, 0xC0, 0x6B, 0xA9, 0x03,
  0x00, 0x00, 0x00, 0xE0, 0x97, 0xD4, 0x03, 0x00, 0x00, 0x00, 0xF0, 0xA5,
  0xD4, 0x03, 0x00, 0x00, 0x00, 0xFC, 0x5A, 0xE9, 0x01, 0x00, 0x00, 0xA7,
  0x7F, 0x64, 0xE5, 0x01, 0x00, 0x00, 0xFF, 0x9F, 0x9B, 0xFA, 0x00, 0x00,
  0x00, 0xFF, 0x97, 0x56, 0x79, 0x00, 0x00, 0x00, 0xBE, 0x2A, 0xA1, 0x7D,
  0x00, 0x00, 0x00, 0x7C, 0x95, 0x5A, 0x3E, 0x00, 0x00, 0x00, 0xF8, 0x6A,
  0xA5, 0x1F, 0x00, 0x00, 0x00, 0xE0, 0xAF, 0xF9, 0x07, 0x00, 0x00, 0x00,
  0xC0, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00,
};

void setup() {
  Serial.begin(115200);
  pinMode(buzzerPin, OUTPUT);
  ccs.begin();
  Wire.begin();
  SPI.begin(14, 12, 13, 33);
  u8g2.begin();

  //Configure HDC1080
  Wire.beginTransmission(0x40);
  Wire.write(0x02);
  Wire.write(0x90);
  Wire.write(0x00);
  Wire.endTransmission();
  delay(20);

  u8g2.clearBuffer();
  timer0 = 0; // Init timer 0
  Start_WiFi(ssid, password);
  u8g2.clearBuffer();
}

void loop() {

  if (timer0 > Weather_interval || initboot) // Do the following if mills > interval  or initboot = true
  {
    initboot = false; // Set initial boot to false because it's already run
    //init and get the time
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    timer0 = 0;                                 // Reset timer to zero
    Call_API(&currCondString); // Get data with an API call and place response in a String
    Serial.println(currCondString);   // Display the response
    if (CurrCondObj(&currCondString)) {
      icon = getWeatherIcon();
      if (degreesC)
        CurrTemp = getCurrC();
      else
        CurrTemp = getCurrF();
      CurrPress = getPressure_mb();
      CurrWeather = getCurrWeather();
      CurrHumd = getRelHum();
      if (windMPH)
        CurrWind = getWindMPH();
      else
        CurrWind = getWindKPH();
      CurrTrend = getPressure_trend();
    }
  }
  u8g2.clearBuffer();

  if (icon == "snow" ||
      icon == "chanceflurries" ||
      icon == "chancesnow" ||
      icon == "flurries" ||
      icon == "nt_chanceflurries" ||
      icon == "nt_chancesnow" ||
      icon == "nt_flurries" ||
      icon == "nt_snow")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, snow_icon);

  if (icon == "rain" ||
      icon == "chancerain" ||
      icon == "nt_chancerain" ||
      icon == "nt_rain")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, rain_icon);

  if (icon == "sleet" ||
      icon == "chancesleet" ||
      icon == "nt_chancesleet" ||
      icon == "nt_sleet")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, sleet_icon);

  if (icon == "sunny" ||
      icon == "clear")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, sunny_icon);

  if (icon == "cloudy" ||
      icon == "nt_cloudy")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, cloudy_icon);

  if (icon == "mostlysunny" ||
      icon == "partlycloudy" ||
      icon == "partlysunny" ||
      icon == "mostlycloudy")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, mostlysunny_icon);

  if (icon == "fog" ||
      icon == "nt_fog" ||
      icon == "nt_hazy" ||
      icon == "hazy")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, fog_icon);

  if (icon == "tstorms" ||
      icon == "chancetstorms" ||
      icon == "nt_tstorms" ||
      icon == "nt_chancetstorms")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, tstorms_icon);

  if (icon == "nt_mostlycloudy" ||
      icon == "nt_mostlysunny" ||
      icon == "nt_partlycloudy" ||
      icon == "nt_partlysunny")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, nt_mostlycloudy_icon);

  if (icon == "nt_clear")
    u8g2.drawXBMP(icon_x, icon_y, 50, 50, nt_clear_icon);

  displayData();

  u8g2.sendBuffer();

}

int Start_WiFi(const char* ssid, const char* password) {
  u8g2.setFont(u8g2_font_profont15_mf);

  int spacing = u8g2.getStrWidth(ssid);
  u8g2.setCursor(78 - (spacing / 2), 35);
  u8g2.print("Connecting to ");
  u8g2.print(ssid);
  int connAttempts = 0;
  Serial.println("\r\nConnecting to: " + String(ssid));
  WiFi.begin(ssid, password);
  u8g2.setCursor(20, 50);

  while (WiFi.status() != WL_CONNECTED ) {
    delay(500);
    Serial.print(".");
    u8g2.print(".");
    u8g2.sendBuffer();
    while (connAttempts > 30) // If connection to WiFi fails, do this for ever
    {
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_profont15_mf);
      int spacing = u8g2.getStrWidth(ssid);
      u8g2.setCursor(53 - (spacing / 2), 35);
      u8g2.print("Connection to ");
      u8g2.print(ssid);
      u8g2.print(" failed");
      u8g2.sendBuffer();
    }
    connAttempts++;
  }

  Serial.println("WiFi connected\r\n");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  return 1;
}

int Call_API(String* resultString) {
  client.stop();  // Clear any current connections
  Serial.println("Connecting to " + String(host)); // start a new connection
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("Connection failed");
    return false;
  }
  String url;
  if (PWS)
    url = "http://api.wunderground.com/api/" + apikey + "/conditions/q/" + PWSLocation + ".json";
  else
    url = "http://api.wunderground.com/api/" + apikey + "/conditions/q/" + country + "/" + city + ".json";

  Serial.println("Requesting URL: " + String(url));
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Connection Timeout...Stopping");
      client.stop();
      return false;
    }
  }
  Serial.print("Receiving API weather data");
  while (client.available()) {
    *(resultString) = client.readStringUntil('\r');
    Serial.print(".");
  }
  Serial.println("\r\nClosing connection");
  return true;
}

bool  api_error;
const char* CurrentObservation_location_full;
const char* CurrentObservation_location_city;
const char* CurrentObservation_location_state;
const char* CurrentObservation_location_state_name;
const char* CurrentObservation_location_zip;
const char* CurrentObservation_location_country;
const char* CurrentObservation_location_country_iso3166;
const char* CurrentObservation_latitude;
const char* CurrentObservation_longitude;
const char* CurrentObservation_elevation;
const char* CurrentObservation_local_time_rfc822;
const char* CurrentObservation_observation_time;
const char* CurrentObservation_weather;
const char* CurrentObservation_temperature_string;
const char* CurrentObservation_temp_f;
const char* CurrentObservation_temp_c;
const char* CurrentObservation_dewpoint_f;
const char* CurrentObservation_dewpoint_c;
const char* CurrentObservation_heat_index_f;
const char* CurrentObservation_heat_index_c;
const char* CurrentObservation_windchill_f;
const char* CurrentObservation_windchill_c;
const char* CurrentObservation_relative_humidity;
const char* CurrentObservation_wind_string;
const char* CurrentObservation_wind_mph;
const char* CurrentObservation_wind_kph;
const char* CurrentObservation_wind_dir;
const char* CurrentObservation_wind_degrees;
const char* CurrentObservation_visibility_mi;
const char* CurrentObservation_visibility_km;
const char* CurrentObservation_pressure_mb;
const char* CurrentObservation_pressure_in;
const char* CurrentObservation_pressure_trend;
const char* CurrentObservation_precip_today_string;
const char* CurrentObservation_precip_today_in;
const char* CurrentObservation_precip_today_metric;
const char* CurrentObservation_icon;

bool  CurrCondObj(String* currCondString) {
  api_error = false;
  // When using a StaticJsonBuffer you must allocate sufficient memory for the json string returned by the WU api
  Serial.println("Creating object...");
  DynamicJsonBuffer jsonBuffer(5 * 1024);
  // Create root object and parse the json file returned from the api. The API returns errors and these need to be checked to ensure successful decoding
  JsonObject& root = jsonBuffer.parseObject(*(currCondString));
  if (root.success()) {
    Serial.println("root object created...");
    JsonObject& CurrentObservation = root["current_observation"];
    if (CurrentObservation.success()) {
      Serial.println("CurrentObservation object created...");
      // Now process the  "display_location":
      JsonObject& CurrentObservation_display_location     = CurrentObservation["display_location"]; // Set root location

      CurrentObservation_location_full            = CurrentObservation_display_location["full"];
      CurrentObservation_location_city            = CurrentObservation_display_location["city"];
      CurrentObservation_location_state           = CurrentObservation_display_location["state"];
      CurrentObservation_latitude                 = CurrentObservation_display_location["latitude"];
      CurrentObservation_longitude                = CurrentObservation_display_location["longitude"];
      CurrentObservation_elevation                = CurrentObservation_display_location["elevation"];
      CurrentObservation_location_state_name      = CurrentObservation_display_location["state_name"];
      CurrentObservation_location_country         = CurrentObservation_display_location["country"];
      CurrentObservation_location_country_iso3166 = CurrentObservation_display_location["country_iso3166"];
      CurrentObservation_location_zip             = CurrentObservation_display_location["zip"];
      CurrentObservation_local_time_rfc822        = CurrentObservation["local_time_rfc822"];
      CurrentObservation_observation_time         = CurrentObservation["observation_time"];
      CurrentObservation_weather                  = CurrentObservation["weather"];
      CurrentObservation_temperature_string       = CurrentObservation["temperature_string"];
      CurrentObservation_temp_f                   = CurrentObservation["temp_f"];
      CurrentObservation_temp_c                   = CurrentObservation["temp_c"];
      CurrentObservation_dewpoint_f               = CurrentObservation["dewpoint_f"];
      CurrentObservation_dewpoint_c               = CurrentObservation["dewpoint_c"];
      CurrentObservation_heat_index_f             = CurrentObservation["heat_index_f"];
      CurrentObservation_heat_index_c             = CurrentObservation["heat_index_c"];
      CurrentObservation_windchill_f              = CurrentObservation["windchill_f"];
      CurrentObservation_windchill_c              = CurrentObservation["windchill_c"];
      CurrentObservation_relative_humidity        = CurrentObservation["relative_humidity"];
      CurrentObservation_wind_string              = CurrentObservation["wind_string"];
      CurrentObservation_wind_mph                 = CurrentObservation["wind_mph"];
      CurrentObservation_wind_kph                 = CurrentObservation["wind_kph"];
      CurrentObservation_wind_dir                 = CurrentObservation["wind_dir"];
      CurrentObservation_wind_degrees             = CurrentObservation["wind_degrees"];
      CurrentObservation_pressure_mb              = CurrentObservation["pressure_mb"];
      CurrentObservation_pressure_in              = CurrentObservation["pressure_in"];
      CurrentObservation_pressure_trend           = CurrentObservation["pressure_trend"];
      CurrentObservation_precip_today_string      = CurrentObservation["precip_today_string"];
      CurrentObservation_precip_today_in          = CurrentObservation["precip_today_metric"];
      CurrentObservation_precip_today_metric      = CurrentObservation["precip_today_metric"];
      CurrentObservation_visibility_mi            = CurrentObservation["visibility_mi"];
      CurrentObservation_visibility_km            = CurrentObservation["visibility_km"];
      CurrentObservation_icon                     = CurrentObservation["icon"];
      return true;
    }
    else
    {
      // if the object could not be created, then return an error make an API call the next time around
      Serial.println("Unable to obtain current observation object");
      u8g2.clearBuffer();
      u8g2.setCursor(1, 30);
      u8g2.setFont(u8g2_font_profont15_mf);
      u8g2.print("Unable to obtain current observation object");
      u8g2.sendBuffer();
      api_error = true;
      return false;
    }
  }
  else
  {
    // if the root object could not be created, then return an error make an API call the next time around
    Serial.println("Unable to create a root object");
    u8g2.clearBuffer();
    u8g2.setCursor(1, 30);
    u8g2.setFont(u8g2_font_profont15_mf);
    u8g2.print("Unable to create a root object.");
    u8g2.setCursor(1, 45);
    u8g2.print("Possible cause: City unknown.");

    u8g2.sendBuffer();
    api_error = true;
    return false;
  }
}

// Functions for weather data.
String getCountry()          {
  return CurrentObservation_location_country;
}
String getCity()             {
  return CurrentObservation_location_city;
}
String getCityState()        {
  return CurrentObservation_location_full;
}
String getState()            {
  return CurrentObservation_location_state_name;
}
String getZip()              {
  return CurrentObservation_location_zip;
}
String getLatitude()         {
  return CurrentObservation_latitude;
}
String getLongitude()        {
  return CurrentObservation_longitude;
}
String getElevation()        {
  return CurrentObservation_elevation;
};
String getLocalTime()        {
  return CurrentObservation_local_time_rfc822;
}
String getObsTime()          {
  return CurrentObservation_observation_time;
}
String getCurrWeather()      {
  return CurrentObservation_weather;
}
String getCurrTempString()   {
  return CurrentObservation_temperature_string;
}
String getCurrF()            {
  return CurrentObservation_temp_f;
}
String getCurrC()            {
  return CurrentObservation_temp_c;
}
String getDewPointF()        {
  return CurrentObservation_dewpoint_f;
}
String getDewPointC()        {
  return CurrentObservation_dewpoint_c;
}
String getHeatindexF()       {
  return CurrentObservation_heat_index_f;
}
String getHeatindexC()       {
  return CurrentObservation_heat_index_c;
}
String getWindchillF()       {
  return CurrentObservation_windchill_f;
}
String getWindchillC()       {
  return CurrentObservation_windchill_c;
}
String getRelHum()           {
  return CurrentObservation_relative_humidity;
}
String getWindString()       {
  return CurrentObservation_wind_string;
}
String getWindMPH()          {
  return CurrentObservation_wind_mph;
}
String getWindKPH()          {
  return CurrentObservation_wind_kph;
}
String getWindDir()          {
  return CurrentObservation_wind_dir;
}
String getWindDegrees()      {
  return CurrentObservation_wind_degrees;
}
String getPressure_mb()      {
  return CurrentObservation_pressure_mb;
}
String getPressure_in()      {
  return CurrentObservation_pressure_in;
}
String getPressure_trend()   {
  return CurrentObservation_pressure_trend;
}
String getPrecipTodayString() {
  return CurrentObservation_precip_today_string;
}
String getPrecipTodayInches() {
  return CurrentObservation_precip_today_in;
}
String getPrecipTodayMet()   {
  return CurrentObservation_precip_today_metric;
}
String getVisibility_mi ()   {
  return CurrentObservation_visibility_mi;
}
String getVisibility_km ()   {
  return CurrentObservation_visibility_km;
}
String getWeatherIcon()      {
  return CurrentObservation_icon;
}

double readSensor(double* temperature)
{
  //holds 2 bytes of data from I2C Line
  uint8_t Byte[4];

  //holds the total contents of the temp register
  uint16_t temp;

  //holds the total contents of the humidity register
  uint16_t humidity;

  //Point to device 0x40 (Address for HDC1080)
  Wire.beginTransmission(0x40);
  //Point to register 0x00 (Temperature Register)
  Wire.write(0x00);
  //Relinquish master control of I2C line
  //pointing to the temp register triggers a conversion
  Wire.endTransmission();

  //delay to allow for sufficient conversion time
  delay(20);

  //Request four bytes from registers
  Wire.requestFrom(0x40, 4);

  delay(1);

  //If the 4 bytes were returned sucessfully
  if (4 <= Wire.available())
  {
    //take reading
    //Byte[0] holds upper byte of temp reading
    Byte[0] = Wire.read();
    //Byte[1] holds lower byte of temp reading
    Byte[1] = Wire.read();

    //Byte[3] holds upper byte of humidity reading
    Byte[3] = Wire.read();
    //Byte[4] holds lower byte of humidity reading
    Byte[4] = Wire.read();

    //Combine the two bytes to make one 16 bit int
    temp = (((unsigned int)Byte[0] << 8 | Byte[1]));

    //Temp(C) = reading/(2^16)*165(C) - 40(C)
    *temperature = (double)(temp) / (65536) * 165 - 40;

    //Combine the two bytes to make one 16 bit int
    humidity = (((unsigned int)Byte[3] << 8 | Byte[4]));

    //Humidity(%) = reading/(2^16)*100%
    return (double)(humidity) / (65536) * 100;
  }
}

void displayData()
{

  // Draw vertival separation lines
  u8g2.drawLine(92, 0, 92, 63);
  u8g2.drawLine(164, 0, 164, 63);

  u8g2.setFont(u8g2_font_logisoso16_tn);
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    u8g2.setCursor(1, 15);
    u8g2.print("Connection to time server failed");
    u8g2.sendBuffer();
    return;
  }

  u8g2.setCursor(105, 16);
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
  u8g2.print(&timeinfo, "%H:%M");

  //                                                               Display external readings
  u8g2.setFont(u8g2_font_profont15_mf);
  u8g2.setCursor(1, 12);
  u8g2.print("Temp:");
  u8g2.print(CurrTemp);
  if (degreesC)
    u8g2.print("C");
  else
    u8g2.print("F");

  u8g2.setCursor(1, 27);
  u8g2.print("Humd:");
  u8g2.print(CurrHumd);

  u8g2.setCursor(1, 42);
  u8g2.print("Wind:");
  u8g2.print(CurrWind);
  if (windMPH)
    u8g2.print("mph");
  else
    u8g2.print("kph");

  u8g2.setCursor(1, 57);
  u8g2.print("Pres:");
  u8g2.print(CurrPress);
  u8g2.print("hPa");

  //                                                               Display internal readings & send the values to Domoticz as well
  double temperature;
  double humidity;

  humidity = readSensor(&temperature);
  u8g2.setCursor(172, 12);
  u8g2.print("Temp:");

  if (degreesC)
  {
    u8g2.print((temperature + TempOffset), 1);
    u8g2.print("C");
  }
  else
  {
    u8g2.print((((temperature + TempOffset) * 9 / 5) + 32), 1);
    u8g2.print("F");
  }

  u8g2.setCursor(172, 27);
  u8g2.print("Humd:");
  u8g2.print((humidity + HumOffset), 0);
  u8g2.print("%");

  if (!ccs.readData()) {
    u8g2.setCursor(172, 42);
    u8g2.print("CO2:");
    CO2 = (ccs.geteCO2());
    u8g2.print(CO2);
    u8g2.print("ppm");

    u8g2.setCursor(172, 57);
    u8g2.print("VOC:");
    TVOC = (ccs.getTVOC());
    u8g2.print(ccs.getTVOC());
    u8g2.print("ppb");

if (client.connect(domoticz_server,port)) {
  
    client.print("GET /json.htm?type=command&param=udevice&idx=");
    client.print(idx1);
    client.print("&nvalue=0&svalue=");
    client.print((temperature + TempOffset), 1);
    client.print(";");
    client.print((humidity + HumOffset), 0);;
    client.print(";0"); //Value for HUM_STAT. Can be one of: 0=Normal, 1=Comfortable, 2=Dry, 3=Wet
    client.print("GET /json.htm?type=command&param=udevice&idx="); // Change idx to Co2 Sensor idx
    client.print(idx2);
    client.print("&nvalue=0&svalue=");
    client.print(CO2);
    client.print("GET /json.htm?type=command&param=udevice&idx="); // Change idx to Co2 Sensor idx
    client.print(idx3);
    client.print("&nvalue=0&svalue=");
    client.print(TVOC);; 
    client.println(" HTTP/1.1");
    client.print("Host: ");
    client.print(domoticz_server);
    client.print(":");
    client.println(port);
    client.println("User-Agent: esp32-weatherstation");
    client.println("Connection: close");
    client.println();

    client.stop();
    }
    
    if (CO2 > CO2Trigger)
    {
      CO2Alarm();
    }

    if (TVOC > TVOCTrigger)
    {
      TVOCAlarm();
    }
  }
  delay(100);
}

void CO2Alarm()
{

  if (returnAfterAlarm) // If the returnAfterAlarm = true, Do this and return

  {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_inb30_mr);
    u8g2.setCursor(5, 45);
    u8g2.print("CO2 ALARM");
    u8g2.sendBuffer();
    digitalWrite(buzzerPin, HIGH);
    delay(500);
    u8g2.clearBuffer();
    u8g2.sendBuffer();
    digitalWrite(buzzerPin, LOW);
    delay(500);
  }

  else // If the returnAfterAlarm = false, Do this for ever
  {
    while (1)
    {
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_inb30_mr);
      u8g2.setCursor(5, 45);
      u8g2.print("CO2 ALARM");
      u8g2.sendBuffer();
      digitalWrite(buzzerPin, HIGH);
      delay(500);
      u8g2.clearBuffer();
      u8g2.sendBuffer();
      delay(500);
    }
  }
}

void TVOCAlarm()
{
  if (returnAfterAlarm) // If the returnAfterAlarm = true, Do this and return
  {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_inb30_mr);
    u8g2.setCursor(5, 45);
    u8g2.print("VOC ALARM");
    u8g2.sendBuffer();
    digitalWrite(buzzerPin, HIGH);
    delay(500);
    u8g2.clearBuffer();
    u8g2.sendBuffer();
    digitalWrite(buzzerPin, LOW);
    delay(500);

  }
  else // If the returnAfterAlarm = false, Do this for ever
  {
    while (1)
    {
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_inb30_mr);
      u8g2.setCursor(5, 45);
      u8g2.print("VOC ALARM");
      u8g2.sendBuffer();
      digitalWrite(buzzerPin, HIGH);
      delay(500);
      u8g2.clearBuffer();
      u8g2.sendBuffer();
      digitalWrite(buzzerPin, LOW);
      delay(500);
    }
  }
}
/*
 void printInfo()
{
// Domoticz format /json.htm?type=command&param=udevice&idx=IDX&nvalue=0&svalue=TEMP;HUM;HUM_STAT

if (client.connect(domoticz_server,port)) {
  
    client.print("GET /json.htm?type=command&param=udevice&idx=");
    client.print(idx1);
    client.print("&nvalue=0&svalue=");
    client.print((temperature + TempOffset), 1);
    client.print(";");
    client.print(humidity);
    client.print(";0"); //Value for HUM_STAT. Can be one of: 0=Normal, 1=Comfortable, 2=Dry, 3=Wet
    client.print("GET /json.htm?type=command&param=udevice&idx="); // Change idx to Co2 Sensor idx
    client.print(idx2);
    client.print("&nvalue=0&svalue=");
    client.print(CO2);
    client.print("GET /json.htm?type=command&param=udevice&idx="); // Change idx to Co2 Sensor idx
    client.print(idx3);
    client.print("&nvalue=0&svalue=");
    client.print(TVOC);; 
    client.println(" HTTP/1.1");
    client.print("Host: ");
    client.print(domoticz_server);
    client.print(":");
    client.println(port);
    client.println("User-Agent: Arduino-ethernet");
    client.println("Connection: close");
    client.println();

    client.stop();
    }
}
*/
